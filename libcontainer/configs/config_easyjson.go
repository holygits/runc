// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package configs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	os "os"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs(in *jlexer.Lexer, out *Syscall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "action":
			out.Action = Action(in.Int())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]*Arg, 0, 8)
					} else {
						out.Args = []*Arg{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Arg
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Arg)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Args = append(out.Args, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs(out *jwriter.Writer, in Syscall) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"action\":")
	out.Int(int(in.Action))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"args\":")
	if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Args {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Syscall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Syscall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Syscall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Syscall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs1(in *jlexer.Lexer, out *Seccomp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default_action":
			out.DefaultAction = Action(in.Int())
		case "architectures":
			if in.IsNull() {
				in.Skip()
				out.Architectures = nil
			} else {
				in.Delim('[')
				if out.Architectures == nil {
					if !in.IsDelim(']') {
						out.Architectures = make([]string, 0, 4)
					} else {
						out.Architectures = []string{}
					}
				} else {
					out.Architectures = (out.Architectures)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Architectures = append(out.Architectures, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "syscalls":
			if in.IsNull() {
				in.Skip()
				out.Syscalls = nil
			} else {
				in.Delim('[')
				if out.Syscalls == nil {
					if !in.IsDelim(']') {
						out.Syscalls = make([]*Syscall, 0, 8)
					} else {
						out.Syscalls = []*Syscall{}
					}
				} else {
					out.Syscalls = (out.Syscalls)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *Syscall
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(Syscall)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.Syscalls = append(out.Syscalls, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs1(out *jwriter.Writer, in Seccomp) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"default_action\":")
	out.Int(int(in.DefaultAction))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"architectures\":")
	if in.Architectures == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.Architectures {
			if v6 > 0 {
				out.RawByte(',')
			}
			out.String(string(v7))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"syscalls\":")
	if in.Syscalls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v8, v9 := range in.Syscalls {
			if v8 > 0 {
				out.RawByte(',')
			}
			if v9 == nil {
				out.RawString("null")
			} else {
				(*v9).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Seccomp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Seccomp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Seccomp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Seccomp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs1(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs2(in *jlexer.Lexer, out *Rlimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "hard":
			out.Hard = uint64(in.Uint64())
		case "soft":
			out.Soft = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs2(out *jwriter.Writer, in Rlimit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.Int(int(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hard\":")
	out.Uint64(uint64(in.Hard))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"soft\":")
	out.Uint64(uint64(in.Soft))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rlimit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rlimit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rlimit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rlimit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs2(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs3(in *jlexer.Lexer, out *IDMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "container_id":
			out.ContainerID = int(in.Int())
		case "host_id":
			out.HostID = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs3(out *jwriter.Writer, in IDMap) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"container_id\":")
	out.Int(int(in.ContainerID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"host_id\":")
	out.Int(int(in.HostID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"size\":")
	out.Int(int(in.Size))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IDMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IDMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IDMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IDMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs3(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs4(in *jlexer.Lexer, out *Hooks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Prestart":
			if in.IsNull() {
				in.Skip()
				out.Prestart = nil
			} else {
				in.Delim('[')
				if out.Prestart == nil {
					if !in.IsDelim(']') {
						out.Prestart = make([]Hook, 0, 4)
					} else {
						out.Prestart = []Hook{}
					}
				} else {
					out.Prestart = (out.Prestart)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Hook
					out.Prestart = append(out.Prestart, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Poststart":
			if in.IsNull() {
				in.Skip()
				out.Poststart = nil
			} else {
				in.Delim('[')
				if out.Poststart == nil {
					if !in.IsDelim(']') {
						out.Poststart = make([]Hook, 0, 4)
					} else {
						out.Poststart = []Hook{}
					}
				} else {
					out.Poststart = (out.Poststart)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Hook
					out.Poststart = append(out.Poststart, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Poststop":
			if in.IsNull() {
				in.Skip()
				out.Poststop = nil
			} else {
				in.Delim('[')
				if out.Poststop == nil {
					if !in.IsDelim(']') {
						out.Poststop = make([]Hook, 0, 4)
					} else {
						out.Poststop = []Hook{}
					}
				} else {
					out.Poststop = (out.Poststop)[:0]
				}
				for !in.IsDelim(']') {
					var v12 Hook
					out.Poststop = append(out.Poststop, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs4(out *jwriter.Writer, in Hooks) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Prestart\":")
	if in.Prestart == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v13, _ := range in.Prestart {
			if v13 > 0 {
				out.RawByte(',')
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Poststart\":")
	if in.Poststart == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v15, _ := range in.Poststart {
			if v15 > 0 {
				out.RawByte(',')
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Poststop\":")
	if in.Poststop == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, _ := range in.Poststop {
			if v17 > 0 {
				out.RawByte(',')
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Hooks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Hooks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Hooks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Hooks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs4(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs5(in *jlexer.Lexer, out *FuncHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs5(out *jwriter.Writer, in FuncHook) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FuncHook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FuncHook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FuncHook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FuncHook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs5(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs6(in *jlexer.Lexer, out *Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "no_pivot_root":
			out.NoPivotRoot = bool(in.Bool())
		case "parent_death_signal":
			out.ParentDeathSignal = int(in.Int())
		case "rootfs":
			out.Rootfs = string(in.String())
		case "readonlyfs":
			out.Readonlyfs = bool(in.Bool())
		case "rootPropagation":
			out.RootPropagation = int(in.Int())
		case "mounts":
			if in.IsNull() {
				in.Skip()
				out.Mounts = nil
			} else {
				in.Delim('[')
				if out.Mounts == nil {
					if !in.IsDelim(']') {
						out.Mounts = make([]*Mount, 0, 8)
					} else {
						out.Mounts = []*Mount{}
					}
				} else {
					out.Mounts = (out.Mounts)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *Mount
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(Mount)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs7(in, &*v19)
					}
					out.Mounts = append(out.Mounts, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*Device, 0, 8)
					} else {
						out.Devices = []*Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v20 *Device
					if in.IsNull() {
						in.Skip()
						v20 = nil
					} else {
						if v20 == nil {
							v20 = new(Device)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs8(in, &*v20)
					}
					out.Devices = append(out.Devices, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mount_label":
			out.MountLabel = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make(Namespaces, 0, 2)
					} else {
						out.Namespaces = Namespaces{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v21 Namespace
					easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs9(in, &v21)
					out.Namespaces = append(out.Namespaces, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "capabilities":
			if in.IsNull() {
				in.Skip()
				out.Capabilities = nil
			} else {
				if out.Capabilities == nil {
					out.Capabilities = new(Capabilities)
				}
				(*out.Capabilities).UnmarshalEasyJSON(in)
			}
		case "networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]*Network, 0, 8)
					} else {
						out.Networks = []*Network{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Network
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Network)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs10(in, &*v22)
					}
					out.Networks = append(out.Networks, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "routes":
			if in.IsNull() {
				in.Skip()
				out.Routes = nil
			} else {
				in.Delim('[')
				if out.Routes == nil {
					if !in.IsDelim(']') {
						out.Routes = make([]*Route, 0, 8)
					} else {
						out.Routes = []*Route{}
					}
				} else {
					out.Routes = (out.Routes)[:0]
				}
				for !in.IsDelim(']') {
					var v23 *Route
					if in.IsNull() {
						in.Skip()
						v23 = nil
					} else {
						if v23 == nil {
							v23 = new(Route)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs11(in, &*v23)
					}
					out.Routes = append(out.Routes, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cgroups":
			if in.IsNull() {
				in.Skip()
				out.Cgroups = nil
			} else {
				if out.Cgroups == nil {
					out.Cgroups = new(Cgroup)
				}
				easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs12(in, &*out.Cgroups)
			}
		case "apparmor_profile":
			out.AppArmorProfile = string(in.String())
		case "process_label":
			out.ProcessLabel = string(in.String())
		case "rlimits":
			if in.IsNull() {
				in.Skip()
				out.Rlimits = nil
			} else {
				in.Delim('[')
				if out.Rlimits == nil {
					if !in.IsDelim(']') {
						out.Rlimits = make([]Rlimit, 0, 2)
					} else {
						out.Rlimits = []Rlimit{}
					}
				} else {
					out.Rlimits = (out.Rlimits)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Rlimit
					(v24).UnmarshalEasyJSON(in)
					out.Rlimits = append(out.Rlimits, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "oom_score_adj":
			out.OomScoreAdj = int(in.Int())
		case "uid_mappings":
			if in.IsNull() {
				in.Skip()
				out.UidMappings = nil
			} else {
				in.Delim('[')
				if out.UidMappings == nil {
					if !in.IsDelim(']') {
						out.UidMappings = make([]IDMap, 0, 2)
					} else {
						out.UidMappings = []IDMap{}
					}
				} else {
					out.UidMappings = (out.UidMappings)[:0]
				}
				for !in.IsDelim(']') {
					var v25 IDMap
					(v25).UnmarshalEasyJSON(in)
					out.UidMappings = append(out.UidMappings, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gid_mappings":
			if in.IsNull() {
				in.Skip()
				out.GidMappings = nil
			} else {
				in.Delim('[')
				if out.GidMappings == nil {
					if !in.IsDelim(']') {
						out.GidMappings = make([]IDMap, 0, 2)
					} else {
						out.GidMappings = []IDMap{}
					}
				} else {
					out.GidMappings = (out.GidMappings)[:0]
				}
				for !in.IsDelim(']') {
					var v26 IDMap
					(v26).UnmarshalEasyJSON(in)
					out.GidMappings = append(out.GidMappings, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mask_paths":
			if in.IsNull() {
				in.Skip()
				out.MaskPaths = nil
			} else {
				in.Delim('[')
				if out.MaskPaths == nil {
					if !in.IsDelim(']') {
						out.MaskPaths = make([]string, 0, 4)
					} else {
						out.MaskPaths = []string{}
					}
				} else {
					out.MaskPaths = (out.MaskPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.MaskPaths = append(out.MaskPaths, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "readonly_paths":
			if in.IsNull() {
				in.Skip()
				out.ReadonlyPaths = nil
			} else {
				in.Delim('[')
				if out.ReadonlyPaths == nil {
					if !in.IsDelim(']') {
						out.ReadonlyPaths = make([]string, 0, 4)
					} else {
						out.ReadonlyPaths = []string{}
					}
				} else {
					out.ReadonlyPaths = (out.ReadonlyPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.ReadonlyPaths = append(out.ReadonlyPaths, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sysctl":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Sysctl = make(map[string]string)
				} else {
					out.Sysctl = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 string
					v29 = string(in.String())
					(out.Sysctl)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		case "seccomp":
			if in.IsNull() {
				in.Skip()
				out.Seccomp = nil
			} else {
				if out.Seccomp == nil {
					out.Seccomp = new(Seccomp)
				}
				(*out.Seccomp).UnmarshalEasyJSON(in)
			}
		case "no_new_privileges":
			out.NoNewPrivileges = bool(in.Bool())
		case "version":
			out.Version = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.Labels = append(out.Labels, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "no_new_keyring":
			out.NoNewKeyring = bool(in.Bool())
		case "rootless":
			out.Rootless = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs6(out *jwriter.Writer, in Config) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"no_pivot_root\":")
	out.Bool(bool(in.NoPivotRoot))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"parent_death_signal\":")
	out.Int(int(in.ParentDeathSignal))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rootfs\":")
	out.String(string(in.Rootfs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"readonlyfs\":")
	out.Bool(bool(in.Readonlyfs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rootPropagation\":")
	out.Int(int(in.RootPropagation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mounts\":")
	if in.Mounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v31, v32 := range in.Mounts {
			if v31 > 0 {
				out.RawByte(',')
			}
			if v32 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs7(out, *v32)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"devices\":")
	if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v33, v34 := range in.Devices {
			if v33 > 0 {
				out.RawByte(',')
			}
			if v34 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs8(out, *v34)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mount_label\":")
	out.String(string(in.MountLabel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hostname\":")
	out.String(string(in.Hostname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"namespaces\":")
	if in.Namespaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v35, v36 := range in.Namespaces {
			if v35 > 0 {
				out.RawByte(',')
			}
			easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs9(out, v36)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"capabilities\":")
	if in.Capabilities == nil {
		out.RawString("null")
	} else {
		(*in.Capabilities).MarshalEasyJSON(out)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"networks\":")
	if in.Networks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v37, v38 := range in.Networks {
			if v37 > 0 {
				out.RawByte(',')
			}
			if v38 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs10(out, *v38)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"routes\":")
	if in.Routes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v39, v40 := range in.Routes {
			if v39 > 0 {
				out.RawByte(',')
			}
			if v40 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs11(out, *v40)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cgroups\":")
	if in.Cgroups == nil {
		out.RawString("null")
	} else {
		easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs12(out, *in.Cgroups)
	}
	if in.AppArmorProfile != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"apparmor_profile\":")
		out.String(string(in.AppArmorProfile))
	}
	if in.ProcessLabel != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"process_label\":")
		out.String(string(in.ProcessLabel))
	}
	if len(in.Rlimits) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"rlimits\":")
		if in.Rlimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Rlimits {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"oom_score_adj\":")
	out.Int(int(in.OomScoreAdj))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid_mappings\":")
	if in.UidMappings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v43, v44 := range in.UidMappings {
			if v43 > 0 {
				out.RawByte(',')
			}
			(v44).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gid_mappings\":")
	if in.GidMappings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v45, v46 := range in.GidMappings {
			if v45 > 0 {
				out.RawByte(',')
			}
			(v46).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mask_paths\":")
	if in.MaskPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v47, v48 := range in.MaskPaths {
			if v47 > 0 {
				out.RawByte(',')
			}
			out.String(string(v48))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"readonly_paths\":")
	if in.ReadonlyPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v49, v50 := range in.ReadonlyPaths {
			if v49 > 0 {
				out.RawByte(',')
			}
			out.String(string(v50))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysctl\":")
	if in.Sysctl == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v51First := true
		for v51Name, v51Value := range in.Sysctl {
			if !v51First {
				out.RawByte(',')
			}
			v51First = false
			out.String(string(v51Name))
			out.RawByte(':')
			out.String(string(v51Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seccomp\":")
	if in.Seccomp == nil {
		out.RawString("null")
	} else {
		(*in.Seccomp).MarshalEasyJSON(out)
	}
	if in.NoNewPrivileges {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"no_new_privileges\":")
		out.Bool(bool(in.NoNewPrivileges))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"version\":")
	out.String(string(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"labels\":")
	if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v52, v53 := range in.Labels {
			if v52 > 0 {
				out.RawByte(',')
			}
			out.String(string(v53))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"no_new_keyring\":")
	out.Bool(bool(in.NoNewKeyring))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rootless\":")
	out.Bool(bool(in.Rootless))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Config) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Config) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Config) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Config) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs6(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs12(in *jlexer.Lexer, out *Cgroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Resources = new(Resources)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "parent":
			out.Parent = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "scope_prefix":
			out.ScopePrefix = string(in.String())
		case "Paths":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Paths = make(map[string]string)
				} else {
					out.Paths = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v54 string
					v54 = string(in.String())
					(out.Paths)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		case "allow_all_devices":
			if in.IsNull() {
				in.Skip()
				out.AllowAllDevices = nil
			} else {
				if out.AllowAllDevices == nil {
					out.AllowAllDevices = new(bool)
				}
				*out.AllowAllDevices = bool(in.Bool())
			}
		case "allowed_devices":
			if in.IsNull() {
				in.Skip()
				out.AllowedDevices = nil
			} else {
				in.Delim('[')
				if out.AllowedDevices == nil {
					if !in.IsDelim(']') {
						out.AllowedDevices = make([]*Device, 0, 8)
					} else {
						out.AllowedDevices = []*Device{}
					}
				} else {
					out.AllowedDevices = (out.AllowedDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *Device
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(Device)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs8(in, &*v55)
					}
					out.AllowedDevices = append(out.AllowedDevices, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "denied_devices":
			if in.IsNull() {
				in.Skip()
				out.DeniedDevices = nil
			} else {
				in.Delim('[')
				if out.DeniedDevices == nil {
					if !in.IsDelim(']') {
						out.DeniedDevices = make([]*Device, 0, 8)
					} else {
						out.DeniedDevices = []*Device{}
					}
				} else {
					out.DeniedDevices = (out.DeniedDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v56 *Device
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						if v56 == nil {
							v56 = new(Device)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs8(in, &*v56)
					}
					out.DeniedDevices = append(out.DeniedDevices, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*Device, 0, 8)
					} else {
						out.Devices = []*Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v57 *Device
					if in.IsNull() {
						in.Skip()
						v57 = nil
					} else {
						if v57 == nil {
							v57 = new(Device)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs8(in, &*v57)
					}
					out.Devices = append(out.Devices, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "memory":
			out.Memory = uint64(in.Uint64())
		case "memory_reservation":
			out.MemoryReservation = uint64(in.Uint64())
		case "memory_swap":
			out.MemorySwap = uint64(in.Uint64())
		case "kernel_memory":
			out.KernelMemory = uint64(in.Uint64())
		case "kernel_memory_tcp":
			out.KernelMemoryTCP = uint64(in.Uint64())
		case "cpu_shares":
			out.CpuShares = uint64(in.Uint64())
		case "cpu_quota":
			out.CpuQuota = int64(in.Int64())
		case "cpu_period":
			out.CpuPeriod = uint64(in.Uint64())
		case "cpu_rt_quota":
			out.CpuRtRuntime = int64(in.Int64())
		case "cpu_rt_period":
			out.CpuRtPeriod = uint64(in.Uint64())
		case "cpuset_cpus":
			out.CpusetCpus = string(in.String())
		case "cpuset_mems":
			out.CpusetMems = string(in.String())
		case "pids_limit":
			out.PidsLimit = int64(in.Int64())
		case "blkio_weight":
			out.BlkioWeight = uint16(in.Uint16())
		case "blkio_leaf_weight":
			out.BlkioLeafWeight = uint16(in.Uint16())
		case "blkio_weight_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioWeightDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioWeightDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioWeightDevice = make([]*WeightDevice, 0, 8)
					} else {
						out.BlkioWeightDevice = []*WeightDevice{}
					}
				} else {
					out.BlkioWeightDevice = (out.BlkioWeightDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *WeightDevice
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(WeightDevice)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs13(in, &*v58)
					}
					out.BlkioWeightDevice = append(out.BlkioWeightDevice, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_read_bps_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleReadBpsDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleReadBpsDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleReadBpsDevice = make([]*ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleReadBpsDevice = []*ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleReadBpsDevice = (out.BlkioThrottleReadBpsDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v59 *ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v59 = nil
					} else {
						if v59 == nil {
							v59 = new(ThrottleDevice)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v59)
					}
					out.BlkioThrottleReadBpsDevice = append(out.BlkioThrottleReadBpsDevice, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_write_bps_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleWriteBpsDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleWriteBpsDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleWriteBpsDevice = make([]*ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleWriteBpsDevice = []*ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleWriteBpsDevice = (out.BlkioThrottleWriteBpsDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v60 *ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v60 = nil
					} else {
						if v60 == nil {
							v60 = new(ThrottleDevice)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v60)
					}
					out.BlkioThrottleWriteBpsDevice = append(out.BlkioThrottleWriteBpsDevice, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_read_iops_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleReadIOPSDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleReadIOPSDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleReadIOPSDevice = make([]*ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleReadIOPSDevice = []*ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleReadIOPSDevice = (out.BlkioThrottleReadIOPSDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(ThrottleDevice)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v61)
					}
					out.BlkioThrottleReadIOPSDevice = append(out.BlkioThrottleReadIOPSDevice, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_write_iops_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleWriteIOPSDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleWriteIOPSDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleWriteIOPSDevice = make([]*ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleWriteIOPSDevice = []*ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleWriteIOPSDevice = (out.BlkioThrottleWriteIOPSDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v62 *ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v62 = nil
					} else {
						if v62 == nil {
							v62 = new(ThrottleDevice)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v62)
					}
					out.BlkioThrottleWriteIOPSDevice = append(out.BlkioThrottleWriteIOPSDevice, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "freezer":
			out.Freezer = FreezerState(in.String())
		case "hugetlb_limit":
			if in.IsNull() {
				in.Skip()
				out.HugetlbLimit = nil
			} else {
				in.Delim('[')
				if out.HugetlbLimit == nil {
					if !in.IsDelim(']') {
						out.HugetlbLimit = make([]*HugepageLimit, 0, 8)
					} else {
						out.HugetlbLimit = []*HugepageLimit{}
					}
				} else {
					out.HugetlbLimit = (out.HugetlbLimit)[:0]
				}
				for !in.IsDelim(']') {
					var v63 *HugepageLimit
					if in.IsNull() {
						in.Skip()
						v63 = nil
					} else {
						if v63 == nil {
							v63 = new(HugepageLimit)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs15(in, &*v63)
					}
					out.HugetlbLimit = append(out.HugetlbLimit, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "oom_kill_disable":
			out.OomKillDisable = bool(in.Bool())
		case "memory_swappiness":
			if in.IsNull() {
				in.Skip()
				out.MemorySwappiness = nil
			} else {
				if out.MemorySwappiness == nil {
					out.MemorySwappiness = new(uint64)
				}
				*out.MemorySwappiness = uint64(in.Uint64())
			}
		case "net_prio_ifpriomap":
			if in.IsNull() {
				in.Skip()
				out.NetPrioIfpriomap = nil
			} else {
				in.Delim('[')
				if out.NetPrioIfpriomap == nil {
					if !in.IsDelim(']') {
						out.NetPrioIfpriomap = make([]*IfPrioMap, 0, 8)
					} else {
						out.NetPrioIfpriomap = []*IfPrioMap{}
					}
				} else {
					out.NetPrioIfpriomap = (out.NetPrioIfpriomap)[:0]
				}
				for !in.IsDelim(']') {
					var v64 *IfPrioMap
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(IfPrioMap)
						}
						easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs16(in, &*v64)
					}
					out.NetPrioIfpriomap = append(out.NetPrioIfpriomap, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "net_cls_classid_u":
			out.NetClsClassid = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs12(out *jwriter.Writer, in Cgroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Parent != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parent\":")
		out.String(string(in.Parent))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"scope_prefix\":")
	out.String(string(in.ScopePrefix))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Paths\":")
	if in.Paths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v65First := true
		for v65Name, v65Value := range in.Paths {
			if !v65First {
				out.RawByte(',')
			}
			v65First = false
			out.String(string(v65Name))
			out.RawByte(':')
			out.String(string(v65Value))
		}
		out.RawByte('}')
	}
	if in.AllowAllDevices != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"allow_all_devices\":")
		if in.AllowAllDevices == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.AllowAllDevices))
		}
	}
	if len(in.AllowedDevices) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"allowed_devices\":")
		if in.AllowedDevices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.AllowedDevices {
				if v66 > 0 {
					out.RawByte(',')
				}
				if v67 == nil {
					out.RawString("null")
				} else {
					easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs8(out, *v67)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DeniedDevices) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"denied_devices\":")
		if in.DeniedDevices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.DeniedDevices {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil {
					out.RawString("null")
				} else {
					easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs8(out, *v69)
				}
			}
			out.RawByte(']')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"devices\":")
	if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v70, v71 := range in.Devices {
			if v70 > 0 {
				out.RawByte(',')
			}
			if v71 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs8(out, *v71)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory\":")
	out.Uint64(uint64(in.Memory))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_reservation\":")
	out.Uint64(uint64(in.MemoryReservation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_swap\":")
	out.Uint64(uint64(in.MemorySwap))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"kernel_memory\":")
	out.Uint64(uint64(in.KernelMemory))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"kernel_memory_tcp\":")
	out.Uint64(uint64(in.KernelMemoryTCP))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_shares\":")
	out.Uint64(uint64(in.CpuShares))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_quota\":")
	out.Int64(int64(in.CpuQuota))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_period\":")
	out.Uint64(uint64(in.CpuPeriod))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_rt_quota\":")
	out.Int64(int64(in.CpuRtRuntime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_rt_period\":")
	out.Uint64(uint64(in.CpuRtPeriod))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpuset_cpus\":")
	out.String(string(in.CpusetCpus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpuset_mems\":")
	out.String(string(in.CpusetMems))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pids_limit\":")
	out.Int64(int64(in.PidsLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_weight\":")
	out.Uint16(uint16(in.BlkioWeight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_leaf_weight\":")
	out.Uint16(uint16(in.BlkioLeafWeight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_weight_device\":")
	if in.BlkioWeightDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v72, v73 := range in.BlkioWeightDevice {
			if v72 > 0 {
				out.RawByte(',')
			}
			if v73 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs13(out, *v73)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_read_bps_device\":")
	if in.BlkioThrottleReadBpsDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v74, v75 := range in.BlkioThrottleReadBpsDevice {
			if v74 > 0 {
				out.RawByte(',')
			}
			if v75 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v75)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_write_bps_device\":")
	if in.BlkioThrottleWriteBpsDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v76, v77 := range in.BlkioThrottleWriteBpsDevice {
			if v76 > 0 {
				out.RawByte(',')
			}
			if v77 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v77)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_read_iops_device\":")
	if in.BlkioThrottleReadIOPSDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v78, v79 := range in.BlkioThrottleReadIOPSDevice {
			if v78 > 0 {
				out.RawByte(',')
			}
			if v79 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v79)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_write_iops_device\":")
	if in.BlkioThrottleWriteIOPSDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v80, v81 := range in.BlkioThrottleWriteIOPSDevice {
			if v80 > 0 {
				out.RawByte(',')
			}
			if v81 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v81)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"freezer\":")
	out.String(string(in.Freezer))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hugetlb_limit\":")
	if in.HugetlbLimit == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v82, v83 := range in.HugetlbLimit {
			if v82 > 0 {
				out.RawByte(',')
			}
			if v83 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs15(out, *v83)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"oom_kill_disable\":")
	out.Bool(bool(in.OomKillDisable))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_swappiness\":")
	if in.MemorySwappiness == nil {
		out.RawString("null")
	} else {
		out.Uint64(uint64(*in.MemorySwappiness))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"net_prio_ifpriomap\":")
	if in.NetPrioIfpriomap == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v84, v85 := range in.NetPrioIfpriomap {
			if v84 > 0 {
				out.RawByte(',')
			}
			if v85 == nil {
				out.RawString("null")
			} else {
				easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs16(out, *v85)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"net_cls_classid_u\":")
	out.Uint32(uint32(in.NetClsClassid))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs16(in *jlexer.Lexer, out *IfPrioMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "interface":
			out.Interface = string(in.String())
		case "priority":
			out.Priority = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs16(out *jwriter.Writer, in IfPrioMap) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"interface\":")
	out.String(string(in.Interface))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"priority\":")
	out.Int64(int64(in.Priority))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs15(in *jlexer.Lexer, out *HugepageLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page_size":
			out.Pagesize = string(in.String())
		case "limit":
			out.Limit = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs15(out *jwriter.Writer, in HugepageLimit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"page_size\":")
	out.String(string(in.Pagesize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"limit\":")
	out.Uint64(uint64(in.Limit))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs14(in *jlexer.Lexer, out *ThrottleDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rate":
			out.Rate = uint64(in.Uint64())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs14(out *jwriter.Writer, in ThrottleDevice) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rate\":")
	out.Uint64(uint64(in.Rate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"major\":")
	out.Int64(int64(in.Major))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minor\":")
	out.Int64(int64(in.Minor))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs13(in *jlexer.Lexer, out *WeightDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight":
			out.Weight = uint16(in.Uint16())
		case "leafWeight":
			out.LeafWeight = uint16(in.Uint16())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs13(out *jwriter.Writer, in WeightDevice) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"weight\":")
	out.Uint16(uint16(in.Weight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"leafWeight\":")
	out.Uint16(uint16(in.LeafWeight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"major\":")
	out.Int64(int64(in.Major))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minor\":")
	out.Int64(int64(in.Minor))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs11(in *jlexer.Lexer, out *Route) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			out.Destination = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "gateway":
			out.Gateway = string(in.String())
		case "interface_name":
			out.InterfaceName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs11(out *jwriter.Writer, in Route) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"destination\":")
	out.String(string(in.Destination))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"source\":")
	out.String(string(in.Source))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gateway\":")
	out.String(string(in.Gateway))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"interface_name\":")
	out.String(string(in.InterfaceName))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs10(in *jlexer.Lexer, out *Network) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "bridge":
			out.Bridge = string(in.String())
		case "mac_address":
			out.MacAddress = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "gateway":
			out.Gateway = string(in.String())
		case "ipv6_address":
			out.IPv6Address = string(in.String())
		case "ipv6_gateway":
			out.IPv6Gateway = string(in.String())
		case "mtu":
			out.Mtu = int(in.Int())
		case "txqueuelen":
			out.TxQueueLen = int(in.Int())
		case "host_interface_name":
			out.HostInterfaceName = string(in.String())
		case "hairpin_mode":
			out.HairpinMode = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs10(out *jwriter.Writer, in Network) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bridge\":")
	out.String(string(in.Bridge))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mac_address\":")
	out.String(string(in.MacAddress))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"address\":")
	out.String(string(in.Address))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gateway\":")
	out.String(string(in.Gateway))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ipv6_address\":")
	out.String(string(in.IPv6Address))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ipv6_gateway\":")
	out.String(string(in.IPv6Gateway))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mtu\":")
	out.Int(int(in.Mtu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"txqueuelen\":")
	out.Int(int(in.TxQueueLen))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"host_interface_name\":")
	out.String(string(in.HostInterfaceName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hairpin_mode\":")
	out.Bool(bool(in.HairpinMode))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs9(in *jlexer.Lexer, out *Namespace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = NamespaceType(in.String())
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs9(out *jwriter.Writer, in Namespace) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs8(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int32(in.Int32())
		case "path":
			out.Path = string(in.String())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		case "permissions":
			out.Permissions = string(in.String())
		case "file_mode":
			out.FileMode = os.FileMode(in.Uint32())
		case "uid":
			out.Uid = uint32(in.Uint32())
		case "gid":
			out.Gid = uint32(in.Uint32())
		case "allow":
			out.Allow = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs8(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.Int32(int32(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"major\":")
	out.Int64(int64(in.Major))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minor\":")
	out.Int64(int64(in.Minor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"permissions\":")
	out.String(string(in.Permissions))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"file_mode\":")
	out.Uint32(uint32(in.FileMode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid\":")
	out.Uint32(uint32(in.Uid))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gid\":")
	out.Uint32(uint32(in.Gid))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"allow\":")
	out.Bool(bool(in.Allow))
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs7(in *jlexer.Lexer, out *Mount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "device":
			out.Device = string(in.String())
		case "flags":
			out.Flags = int(in.Int())
		case "propagation_flags":
			if in.IsNull() {
				in.Skip()
				out.PropagationFlags = nil
			} else {
				in.Delim('[')
				if out.PropagationFlags == nil {
					if !in.IsDelim(']') {
						out.PropagationFlags = make([]int, 0, 8)
					} else {
						out.PropagationFlags = []int{}
					}
				} else {
					out.PropagationFlags = (out.PropagationFlags)[:0]
				}
				for !in.IsDelim(']') {
					var v86 int
					v86 = int(in.Int())
					out.PropagationFlags = append(out.PropagationFlags, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "relabel":
			out.Relabel = string(in.String())
		case "extensions":
			out.Extensions = int(in.Int())
		case "premount_cmds":
			if in.IsNull() {
				in.Skip()
				out.PremountCmds = nil
			} else {
				in.Delim('[')
				if out.PremountCmds == nil {
					if !in.IsDelim(']') {
						out.PremountCmds = make([]Command, 0, 1)
					} else {
						out.PremountCmds = []Command{}
					}
				} else {
					out.PremountCmds = (out.PremountCmds)[:0]
				}
				for !in.IsDelim(']') {
					var v87 Command
					(v87).UnmarshalEasyJSON(in)
					out.PremountCmds = append(out.PremountCmds, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "postmount_cmds":
			if in.IsNull() {
				in.Skip()
				out.PostmountCmds = nil
			} else {
				in.Delim('[')
				if out.PostmountCmds == nil {
					if !in.IsDelim(']') {
						out.PostmountCmds = make([]Command, 0, 1)
					} else {
						out.PostmountCmds = []Command{}
					}
				} else {
					out.PostmountCmds = (out.PostmountCmds)[:0]
				}
				for !in.IsDelim(']') {
					var v88 Command
					(v88).UnmarshalEasyJSON(in)
					out.PostmountCmds = append(out.PostmountCmds, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs7(out *jwriter.Writer, in Mount) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"source\":")
	out.String(string(in.Source))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"destination\":")
	out.String(string(in.Destination))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"device\":")
	out.String(string(in.Device))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"flags\":")
	out.Int(int(in.Flags))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"propagation_flags\":")
	if in.PropagationFlags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v89, v90 := range in.PropagationFlags {
			if v89 > 0 {
				out.RawByte(',')
			}
			out.Int(int(v90))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.String(string(in.Data))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"relabel\":")
	out.String(string(in.Relabel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"extensions\":")
	out.Int(int(in.Extensions))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"premount_cmds\":")
	if in.PremountCmds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v91, v92 := range in.PremountCmds {
			if v91 > 0 {
				out.RawByte(',')
			}
			(v92).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"postmount_cmds\":")
	if in.PostmountCmds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v93, v94 := range in.PostmountCmds {
			if v93 > 0 {
				out.RawByte(',')
			}
			(v94).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs17(in *jlexer.Lexer, out *CommandHook) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v95 string
					v95 = string(in.String())
					out.Args = append(out.Args, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]string, 0, 4)
					} else {
						out.Env = []string{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v96 string
					v96 = string(in.String())
					out.Env = append(out.Env, v96)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dir":
			out.Dir = string(in.String())
		case "timeout":
			if in.IsNull() {
				in.Skip()
				out.Timeout = nil
			} else {
				if out.Timeout == nil {
					out.Timeout = new(time.Duration)
				}
				*out.Timeout = time.Duration(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs17(out *jwriter.Writer, in CommandHook) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"args\":")
	if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v97, v98 := range in.Args {
			if v97 > 0 {
				out.RawByte(',')
			}
			out.String(string(v98))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"env\":")
	if in.Env == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v99, v100 := range in.Env {
			if v99 > 0 {
				out.RawByte(',')
			}
			out.String(string(v100))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dir\":")
	out.String(string(in.Dir))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timeout\":")
	if in.Timeout == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.Timeout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommandHook) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommandHook) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommandHook) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommandHook) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs17(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs18(in *jlexer.Lexer, out *Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v101 string
					v101 = string(in.String())
					out.Args = append(out.Args, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]string, 0, 4)
					} else {
						out.Env = []string{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v102 string
					v102 = string(in.String())
					out.Env = append(out.Env, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dir":
			out.Dir = string(in.String())
		case "timeout":
			if in.IsNull() {
				in.Skip()
				out.Timeout = nil
			} else {
				if out.Timeout == nil {
					out.Timeout = new(time.Duration)
				}
				*out.Timeout = time.Duration(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs18(out *jwriter.Writer, in Command) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"args\":")
	if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v103, v104 := range in.Args {
			if v103 > 0 {
				out.RawByte(',')
			}
			out.String(string(v104))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"env\":")
	if in.Env == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v105, v106 := range in.Env {
			if v105 > 0 {
				out.RawByte(',')
			}
			out.String(string(v106))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dir\":")
	out.String(string(in.Dir))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timeout\":")
	if in.Timeout == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.Timeout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Command) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Command) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Command) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Command) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs18(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs19(in *jlexer.Lexer, out *Capabilities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bounding":
			if in.IsNull() {
				in.Skip()
				out.Bounding = nil
			} else {
				in.Delim('[')
				if out.Bounding == nil {
					if !in.IsDelim(']') {
						out.Bounding = make([]string, 0, 4)
					} else {
						out.Bounding = []string{}
					}
				} else {
					out.Bounding = (out.Bounding)[:0]
				}
				for !in.IsDelim(']') {
					var v107 string
					v107 = string(in.String())
					out.Bounding = append(out.Bounding, v107)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Effective":
			if in.IsNull() {
				in.Skip()
				out.Effective = nil
			} else {
				in.Delim('[')
				if out.Effective == nil {
					if !in.IsDelim(']') {
						out.Effective = make([]string, 0, 4)
					} else {
						out.Effective = []string{}
					}
				} else {
					out.Effective = (out.Effective)[:0]
				}
				for !in.IsDelim(']') {
					var v108 string
					v108 = string(in.String())
					out.Effective = append(out.Effective, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Inheritable":
			if in.IsNull() {
				in.Skip()
				out.Inheritable = nil
			} else {
				in.Delim('[')
				if out.Inheritable == nil {
					if !in.IsDelim(']') {
						out.Inheritable = make([]string, 0, 4)
					} else {
						out.Inheritable = []string{}
					}
				} else {
					out.Inheritable = (out.Inheritable)[:0]
				}
				for !in.IsDelim(']') {
					var v109 string
					v109 = string(in.String())
					out.Inheritable = append(out.Inheritable, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Permitted":
			if in.IsNull() {
				in.Skip()
				out.Permitted = nil
			} else {
				in.Delim('[')
				if out.Permitted == nil {
					if !in.IsDelim(']') {
						out.Permitted = make([]string, 0, 4)
					} else {
						out.Permitted = []string{}
					}
				} else {
					out.Permitted = (out.Permitted)[:0]
				}
				for !in.IsDelim(']') {
					var v110 string
					v110 = string(in.String())
					out.Permitted = append(out.Permitted, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ambient":
			if in.IsNull() {
				in.Skip()
				out.Ambient = nil
			} else {
				in.Delim('[')
				if out.Ambient == nil {
					if !in.IsDelim(']') {
						out.Ambient = make([]string, 0, 4)
					} else {
						out.Ambient = []string{}
					}
				} else {
					out.Ambient = (out.Ambient)[:0]
				}
				for !in.IsDelim(']') {
					var v111 string
					v111 = string(in.String())
					out.Ambient = append(out.Ambient, v111)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs19(out *jwriter.Writer, in Capabilities) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Bounding\":")
	if in.Bounding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v112, v113 := range in.Bounding {
			if v112 > 0 {
				out.RawByte(',')
			}
			out.String(string(v113))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Effective\":")
	if in.Effective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v114, v115 := range in.Effective {
			if v114 > 0 {
				out.RawByte(',')
			}
			out.String(string(v115))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Inheritable\":")
	if in.Inheritable == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v116, v117 := range in.Inheritable {
			if v116 > 0 {
				out.RawByte(',')
			}
			out.String(string(v117))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Permitted\":")
	if in.Permitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v118, v119 := range in.Permitted {
			if v118 > 0 {
				out.RawByte(',')
			}
			out.String(string(v119))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Ambient\":")
	if in.Ambient == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v120, v121 := range in.Ambient {
			if v120 > 0 {
				out.RawByte(',')
			}
			out.String(string(v121))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Capabilities) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Capabilities) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Capabilities) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Capabilities) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs19(l, v)
}
func easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs20(in *jlexer.Lexer, out *Arg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = uint(in.Uint())
		case "value":
			out.Value = uint64(in.Uint64())
		case "value_two":
			out.ValueTwo = uint64(in.Uint64())
		case "op":
			out.Op = Operator(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs20(out *jwriter.Writer, in Arg) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"index\":")
	out.Uint(uint(in.Index))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	out.Uint64(uint64(in.Value))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value_two\":")
	out.Uint64(uint64(in.ValueTwo))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"op\":")
	out.Int(int(in.Op))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Arg) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Arg) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6615c02eEncodeGithubComOpencontainersRuncLibcontainerConfigs20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Arg) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Arg) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6615c02eDecodeGithubComOpencontainersRuncLibcontainerConfigs20(l, v)
}
