// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package libcontainer

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	configs "github.com/opencontainers/runc/libcontainer/configs"
	os "os"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainer(in *jlexer.Lexer, out *linuxContainer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainer(out *jwriter.Writer, in linuxContainer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v linuxContainer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v linuxContainer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *linuxContainer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *linuxContainer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainer(l, v)
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainer1(in *jlexer.Lexer, out *State) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rootless":
			out.Rootless = bool(in.Bool())
		case "cgroup_paths":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CgroupPaths = make(map[string]string)
				} else {
					out.CgroupPaths = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.CgroupPaths)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "namespace_paths":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NamespacePaths = make(map[configs.NamespaceType]string)
				} else {
					out.NamespacePaths = nil
				}
				for !in.IsDelim('}') {
					key := configs.NamespaceType(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.NamespacePaths)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "external_descriptors":
			if in.IsNull() {
				in.Skip()
				out.ExternalDescriptors = nil
			} else {
				in.Delim('[')
				if out.ExternalDescriptors == nil {
					if !in.IsDelim(']') {
						out.ExternalDescriptors = make([]string, 0, 4)
					} else {
						out.ExternalDescriptors = []string{}
					}
				} else {
					out.ExternalDescriptors = (out.ExternalDescriptors)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.ExternalDescriptors = append(out.ExternalDescriptors, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = string(in.String())
		case "init_process_pid":
			out.InitProcessPid = int(in.Int())
		case "init_process_start":
			out.InitProcessStartTime = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Created).UnmarshalJSON(data))
			}
		case "config":
			easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs(in, &out.Config)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainer1(out *jwriter.Writer, in State) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rootless\":")
	out.Bool(bool(in.Rootless))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cgroup_paths\":")
	if in.CgroupPaths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v4First := true
		for v4Name, v4Value := range in.CgroupPaths {
			if !v4First {
				out.RawByte(',')
			}
			v4First = false
			out.String(string(v4Name))
			out.RawByte(':')
			out.String(string(v4Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"namespace_paths\":")
	if in.NamespacePaths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in.NamespacePaths {
			if !v5First {
				out.RawByte(',')
			}
			v5First = false
			out.String(string(v5Name))
			out.RawByte(':')
			out.String(string(v5Value))
		}
		out.RawByte('}')
	}
	if len(in.ExternalDescriptors) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"external_descriptors\":")
		if in.ExternalDescriptors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.ExternalDescriptors {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"init_process_pid\":")
	out.Int(int(in.InitProcessPid))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"init_process_start\":")
	out.String(string(in.InitProcessStartTime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"created\":")
	out.Raw((in.Created).MarshalJSON())
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"config\":")
	easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs(out, in.Config)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v State) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v State) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *State) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *State) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainer1(l, v)
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs(in *jlexer.Lexer, out *configs.Config) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "no_pivot_root":
			out.NoPivotRoot = bool(in.Bool())
		case "parent_death_signal":
			out.ParentDeathSignal = int(in.Int())
		case "rootfs":
			out.Rootfs = string(in.String())
		case "readonlyfs":
			out.Readonlyfs = bool(in.Bool())
		case "rootPropagation":
			out.RootPropagation = int(in.Int())
		case "mounts":
			if in.IsNull() {
				in.Skip()
				out.Mounts = nil
			} else {
				in.Delim('[')
				if out.Mounts == nil {
					if !in.IsDelim(']') {
						out.Mounts = make([]*configs.Mount, 0, 8)
					} else {
						out.Mounts = []*configs.Mount{}
					}
				} else {
					out.Mounts = (out.Mounts)[:0]
				}
				for !in.IsDelim(']') {
					var v8 *configs.Mount
					if in.IsNull() {
						in.Skip()
						v8 = nil
					} else {
						if v8 == nil {
							v8 = new(configs.Mount)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs1(in, &*v8)
					}
					out.Mounts = append(out.Mounts, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*configs.Device, 0, 8)
					} else {
						out.Devices = []*configs.Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v9 *configs.Device
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						if v9 == nil {
							v9 = new(configs.Device)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs2(in, &*v9)
					}
					out.Devices = append(out.Devices, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mount_label":
			out.MountLabel = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make(configs.Namespaces, 0, 2)
					} else {
						out.Namespaces = configs.Namespaces{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v10 configs.Namespace
					easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs3(in, &v10)
					out.Namespaces = append(out.Namespaces, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "capabilities":
			if in.IsNull() {
				in.Skip()
				out.Capabilities = nil
			} else {
				if out.Capabilities == nil {
					out.Capabilities = new(configs.Capabilities)
				}
				easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs4(in, &*out.Capabilities)
			}
		case "networks":
			if in.IsNull() {
				in.Skip()
				out.Networks = nil
			} else {
				in.Delim('[')
				if out.Networks == nil {
					if !in.IsDelim(']') {
						out.Networks = make([]*configs.Network, 0, 8)
					} else {
						out.Networks = []*configs.Network{}
					}
				} else {
					out.Networks = (out.Networks)[:0]
				}
				for !in.IsDelim(']') {
					var v11 *configs.Network
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						if v11 == nil {
							v11 = new(configs.Network)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs5(in, &*v11)
					}
					out.Networks = append(out.Networks, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "routes":
			if in.IsNull() {
				in.Skip()
				out.Routes = nil
			} else {
				in.Delim('[')
				if out.Routes == nil {
					if !in.IsDelim(']') {
						out.Routes = make([]*configs.Route, 0, 8)
					} else {
						out.Routes = []*configs.Route{}
					}
				} else {
					out.Routes = (out.Routes)[:0]
				}
				for !in.IsDelim(']') {
					var v12 *configs.Route
					if in.IsNull() {
						in.Skip()
						v12 = nil
					} else {
						if v12 == nil {
							v12 = new(configs.Route)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs6(in, &*v12)
					}
					out.Routes = append(out.Routes, v12)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cgroups":
			if in.IsNull() {
				in.Skip()
				out.Cgroups = nil
			} else {
				if out.Cgroups == nil {
					out.Cgroups = new(configs.Cgroup)
				}
				easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs7(in, &*out.Cgroups)
			}
		case "apparmor_profile":
			out.AppArmorProfile = string(in.String())
		case "process_label":
			out.ProcessLabel = string(in.String())
		case "rlimits":
			if in.IsNull() {
				in.Skip()
				out.Rlimits = nil
			} else {
				in.Delim('[')
				if out.Rlimits == nil {
					if !in.IsDelim(']') {
						out.Rlimits = make([]configs.Rlimit, 0, 2)
					} else {
						out.Rlimits = []configs.Rlimit{}
					}
				} else {
					out.Rlimits = (out.Rlimits)[:0]
				}
				for !in.IsDelim(']') {
					var v13 configs.Rlimit
					easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs8(in, &v13)
					out.Rlimits = append(out.Rlimits, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "oom_score_adj":
			out.OomScoreAdj = int(in.Int())
		case "uid_mappings":
			if in.IsNull() {
				in.Skip()
				out.UidMappings = nil
			} else {
				in.Delim('[')
				if out.UidMappings == nil {
					if !in.IsDelim(']') {
						out.UidMappings = make([]configs.IDMap, 0, 2)
					} else {
						out.UidMappings = []configs.IDMap{}
					}
				} else {
					out.UidMappings = (out.UidMappings)[:0]
				}
				for !in.IsDelim(']') {
					var v14 configs.IDMap
					easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs9(in, &v14)
					out.UidMappings = append(out.UidMappings, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "gid_mappings":
			if in.IsNull() {
				in.Skip()
				out.GidMappings = nil
			} else {
				in.Delim('[')
				if out.GidMappings == nil {
					if !in.IsDelim(']') {
						out.GidMappings = make([]configs.IDMap, 0, 2)
					} else {
						out.GidMappings = []configs.IDMap{}
					}
				} else {
					out.GidMappings = (out.GidMappings)[:0]
				}
				for !in.IsDelim(']') {
					var v15 configs.IDMap
					easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs9(in, &v15)
					out.GidMappings = append(out.GidMappings, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "mask_paths":
			if in.IsNull() {
				in.Skip()
				out.MaskPaths = nil
			} else {
				in.Delim('[')
				if out.MaskPaths == nil {
					if !in.IsDelim(']') {
						out.MaskPaths = make([]string, 0, 4)
					} else {
						out.MaskPaths = []string{}
					}
				} else {
					out.MaskPaths = (out.MaskPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.MaskPaths = append(out.MaskPaths, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "readonly_paths":
			if in.IsNull() {
				in.Skip()
				out.ReadonlyPaths = nil
			} else {
				in.Delim('[')
				if out.ReadonlyPaths == nil {
					if !in.IsDelim(']') {
						out.ReadonlyPaths = make([]string, 0, 4)
					} else {
						out.ReadonlyPaths = []string{}
					}
				} else {
					out.ReadonlyPaths = (out.ReadonlyPaths)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.ReadonlyPaths = append(out.ReadonlyPaths, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sysctl":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Sysctl = make(map[string]string)
				} else {
					out.Sysctl = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 string
					v18 = string(in.String())
					(out.Sysctl)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		case "seccomp":
			if in.IsNull() {
				in.Skip()
				out.Seccomp = nil
			} else {
				if out.Seccomp == nil {
					out.Seccomp = new(configs.Seccomp)
				}
				easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs10(in, &*out.Seccomp)
			}
		case "no_new_privileges":
			out.NoNewPrivileges = bool(in.Bool())
		case "Hooks":
			if in.IsNull() {
				in.Skip()
				out.Hooks = nil
			} else {
				if out.Hooks == nil {
					out.Hooks = new(configs.Hooks)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Hooks).UnmarshalJSON(data))
				}
			}
		case "version":
			out.Version = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]string, 0, 4)
					} else {
						out.Labels = []string{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Labels = append(out.Labels, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "no_new_keyring":
			out.NoNewKeyring = bool(in.Bool())
		case "rootless":
			out.Rootless = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs(out *jwriter.Writer, in configs.Config) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"no_pivot_root\":")
	out.Bool(bool(in.NoPivotRoot))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"parent_death_signal\":")
	out.Int(int(in.ParentDeathSignal))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rootfs\":")
	out.String(string(in.Rootfs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"readonlyfs\":")
	out.Bool(bool(in.Readonlyfs))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rootPropagation\":")
	out.Int(int(in.RootPropagation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mounts\":")
	if in.Mounts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in.Mounts {
			if v20 > 0 {
				out.RawByte(',')
			}
			if v21 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs1(out, *v21)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"devices\":")
	if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v22, v23 := range in.Devices {
			if v22 > 0 {
				out.RawByte(',')
			}
			if v23 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs2(out, *v23)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mount_label\":")
	out.String(string(in.MountLabel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hostname\":")
	out.String(string(in.Hostname))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"namespaces\":")
	if in.Namespaces == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v24, v25 := range in.Namespaces {
			if v24 > 0 {
				out.RawByte(',')
			}
			easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs3(out, v25)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"capabilities\":")
	if in.Capabilities == nil {
		out.RawString("null")
	} else {
		easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs4(out, *in.Capabilities)
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"networks\":")
	if in.Networks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v26, v27 := range in.Networks {
			if v26 > 0 {
				out.RawByte(',')
			}
			if v27 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs5(out, *v27)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"routes\":")
	if in.Routes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v28, v29 := range in.Routes {
			if v28 > 0 {
				out.RawByte(',')
			}
			if v29 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs6(out, *v29)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cgroups\":")
	if in.Cgroups == nil {
		out.RawString("null")
	} else {
		easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs7(out, *in.Cgroups)
	}
	if in.AppArmorProfile != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"apparmor_profile\":")
		out.String(string(in.AppArmorProfile))
	}
	if in.ProcessLabel != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"process_label\":")
		out.String(string(in.ProcessLabel))
	}
	if len(in.Rlimits) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"rlimits\":")
		if in.Rlimits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.Rlimits {
				if v30 > 0 {
					out.RawByte(',')
				}
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs8(out, v31)
			}
			out.RawByte(']')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"oom_score_adj\":")
	out.Int(int(in.OomScoreAdj))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid_mappings\":")
	if in.UidMappings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in.UidMappings {
			if v32 > 0 {
				out.RawByte(',')
			}
			easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs9(out, v33)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gid_mappings\":")
	if in.GidMappings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v34, v35 := range in.GidMappings {
			if v34 > 0 {
				out.RawByte(',')
			}
			easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs9(out, v35)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mask_paths\":")
	if in.MaskPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v36, v37 := range in.MaskPaths {
			if v36 > 0 {
				out.RawByte(',')
			}
			out.String(string(v37))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"readonly_paths\":")
	if in.ReadonlyPaths == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v38, v39 := range in.ReadonlyPaths {
			if v38 > 0 {
				out.RawByte(',')
			}
			out.String(string(v39))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sysctl\":")
	if in.Sysctl == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v40First := true
		for v40Name, v40Value := range in.Sysctl {
			if !v40First {
				out.RawByte(',')
			}
			v40First = false
			out.String(string(v40Name))
			out.RawByte(':')
			out.String(string(v40Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seccomp\":")
	if in.Seccomp == nil {
		out.RawString("null")
	} else {
		easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs10(out, *in.Seccomp)
	}
	if in.NoNewPrivileges {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"no_new_privileges\":")
		out.Bool(bool(in.NoNewPrivileges))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Hooks\":")
	if in.Hooks == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.Hooks).MarshalJSON())
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"version\":")
	out.String(string(in.Version))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"labels\":")
	if in.Labels == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v41, v42 := range in.Labels {
			if v41 > 0 {
				out.RawByte(',')
			}
			out.String(string(v42))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"no_new_keyring\":")
	out.Bool(bool(in.NoNewKeyring))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rootless\":")
	out.Bool(bool(in.Rootless))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs10(in *jlexer.Lexer, out *configs.Seccomp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default_action":
			out.DefaultAction = configs.Action(in.Int())
		case "architectures":
			if in.IsNull() {
				in.Skip()
				out.Architectures = nil
			} else {
				in.Delim('[')
				if out.Architectures == nil {
					if !in.IsDelim(']') {
						out.Architectures = make([]string, 0, 4)
					} else {
						out.Architectures = []string{}
					}
				} else {
					out.Architectures = (out.Architectures)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.Architectures = append(out.Architectures, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "syscalls":
			if in.IsNull() {
				in.Skip()
				out.Syscalls = nil
			} else {
				in.Delim('[')
				if out.Syscalls == nil {
					if !in.IsDelim(']') {
						out.Syscalls = make([]*configs.Syscall, 0, 8)
					} else {
						out.Syscalls = []*configs.Syscall{}
					}
				} else {
					out.Syscalls = (out.Syscalls)[:0]
				}
				for !in.IsDelim(']') {
					var v44 *configs.Syscall
					if in.IsNull() {
						in.Skip()
						v44 = nil
					} else {
						if v44 == nil {
							v44 = new(configs.Syscall)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs11(in, &*v44)
					}
					out.Syscalls = append(out.Syscalls, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs10(out *jwriter.Writer, in configs.Seccomp) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"default_action\":")
	out.Int(int(in.DefaultAction))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"architectures\":")
	if in.Architectures == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v45, v46 := range in.Architectures {
			if v45 > 0 {
				out.RawByte(',')
			}
			out.String(string(v46))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"syscalls\":")
	if in.Syscalls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v47, v48 := range in.Syscalls {
			if v47 > 0 {
				out.RawByte(',')
			}
			if v48 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs11(out, *v48)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs11(in *jlexer.Lexer, out *configs.Syscall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "action":
			out.Action = configs.Action(in.Int())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]*configs.Arg, 0, 8)
					} else {
						out.Args = []*configs.Arg{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v49 *configs.Arg
					if in.IsNull() {
						in.Skip()
						v49 = nil
					} else {
						if v49 == nil {
							v49 = new(configs.Arg)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs12(in, &*v49)
					}
					out.Args = append(out.Args, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs11(out *jwriter.Writer, in configs.Syscall) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"action\":")
	out.Int(int(in.Action))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"args\":")
	if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v50, v51 := range in.Args {
			if v50 > 0 {
				out.RawByte(',')
			}
			if v51 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs12(out, *v51)
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs12(in *jlexer.Lexer, out *configs.Arg) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "index":
			out.Index = uint(in.Uint())
		case "value":
			out.Value = uint64(in.Uint64())
		case "value_two":
			out.ValueTwo = uint64(in.Uint64())
		case "op":
			out.Op = configs.Operator(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs12(out *jwriter.Writer, in configs.Arg) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"index\":")
	out.Uint(uint(in.Index))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value\":")
	out.Uint64(uint64(in.Value))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"value_two\":")
	out.Uint64(uint64(in.ValueTwo))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"op\":")
	out.Int(int(in.Op))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs9(in *jlexer.Lexer, out *configs.IDMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "container_id":
			out.ContainerID = int(in.Int())
		case "host_id":
			out.HostID = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs9(out *jwriter.Writer, in configs.IDMap) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"container_id\":")
	out.Int(int(in.ContainerID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"host_id\":")
	out.Int(int(in.HostID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"size\":")
	out.Int(int(in.Size))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs8(in *jlexer.Lexer, out *configs.Rlimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int(in.Int())
		case "hard":
			out.Hard = uint64(in.Uint64())
		case "soft":
			out.Soft = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs8(out *jwriter.Writer, in configs.Rlimit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.Int(int(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hard\":")
	out.Uint64(uint64(in.Hard))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"soft\":")
	out.Uint64(uint64(in.Soft))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs7(in *jlexer.Lexer, out *configs.Cgroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.Resources = new(configs.Resources)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "parent":
			out.Parent = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "scope_prefix":
			out.ScopePrefix = string(in.String())
		case "Paths":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Paths = make(map[string]string)
				} else {
					out.Paths = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 string
					v52 = string(in.String())
					(out.Paths)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "allow_all_devices":
			if in.IsNull() {
				in.Skip()
				out.AllowAllDevices = nil
			} else {
				if out.AllowAllDevices == nil {
					out.AllowAllDevices = new(bool)
				}
				*out.AllowAllDevices = bool(in.Bool())
			}
		case "allowed_devices":
			if in.IsNull() {
				in.Skip()
				out.AllowedDevices = nil
			} else {
				in.Delim('[')
				if out.AllowedDevices == nil {
					if !in.IsDelim(']') {
						out.AllowedDevices = make([]*configs.Device, 0, 8)
					} else {
						out.AllowedDevices = []*configs.Device{}
					}
				} else {
					out.AllowedDevices = (out.AllowedDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v53 *configs.Device
					if in.IsNull() {
						in.Skip()
						v53 = nil
					} else {
						if v53 == nil {
							v53 = new(configs.Device)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs2(in, &*v53)
					}
					out.AllowedDevices = append(out.AllowedDevices, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "denied_devices":
			if in.IsNull() {
				in.Skip()
				out.DeniedDevices = nil
			} else {
				in.Delim('[')
				if out.DeniedDevices == nil {
					if !in.IsDelim(']') {
						out.DeniedDevices = make([]*configs.Device, 0, 8)
					} else {
						out.DeniedDevices = []*configs.Device{}
					}
				} else {
					out.DeniedDevices = (out.DeniedDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v54 *configs.Device
					if in.IsNull() {
						in.Skip()
						v54 = nil
					} else {
						if v54 == nil {
							v54 = new(configs.Device)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs2(in, &*v54)
					}
					out.DeniedDevices = append(out.DeniedDevices, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]*configs.Device, 0, 8)
					} else {
						out.Devices = []*configs.Device{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v55 *configs.Device
					if in.IsNull() {
						in.Skip()
						v55 = nil
					} else {
						if v55 == nil {
							v55 = new(configs.Device)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs2(in, &*v55)
					}
					out.Devices = append(out.Devices, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "memory":
			out.Memory = uint64(in.Uint64())
		case "memory_reservation":
			out.MemoryReservation = uint64(in.Uint64())
		case "memory_swap":
			out.MemorySwap = uint64(in.Uint64())
		case "kernel_memory":
			out.KernelMemory = uint64(in.Uint64())
		case "kernel_memory_tcp":
			out.KernelMemoryTCP = uint64(in.Uint64())
		case "cpu_shares":
			out.CpuShares = uint64(in.Uint64())
		case "cpu_quota":
			out.CpuQuota = int64(in.Int64())
		case "cpu_period":
			out.CpuPeriod = uint64(in.Uint64())
		case "cpu_rt_quota":
			out.CpuRtRuntime = int64(in.Int64())
		case "cpu_rt_period":
			out.CpuRtPeriod = uint64(in.Uint64())
		case "cpuset_cpus":
			out.CpusetCpus = string(in.String())
		case "cpuset_mems":
			out.CpusetMems = string(in.String())
		case "pids_limit":
			out.PidsLimit = int64(in.Int64())
		case "blkio_weight":
			out.BlkioWeight = uint16(in.Uint16())
		case "blkio_leaf_weight":
			out.BlkioLeafWeight = uint16(in.Uint16())
		case "blkio_weight_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioWeightDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioWeightDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioWeightDevice = make([]*configs.WeightDevice, 0, 8)
					} else {
						out.BlkioWeightDevice = []*configs.WeightDevice{}
					}
				} else {
					out.BlkioWeightDevice = (out.BlkioWeightDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v56 *configs.WeightDevice
					if in.IsNull() {
						in.Skip()
						v56 = nil
					} else {
						if v56 == nil {
							v56 = new(configs.WeightDevice)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs13(in, &*v56)
					}
					out.BlkioWeightDevice = append(out.BlkioWeightDevice, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_read_bps_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleReadBpsDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleReadBpsDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleReadBpsDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleReadBpsDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleReadBpsDevice = (out.BlkioThrottleReadBpsDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v57 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v57 = nil
					} else {
						if v57 == nil {
							v57 = new(configs.ThrottleDevice)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v57)
					}
					out.BlkioThrottleReadBpsDevice = append(out.BlkioThrottleReadBpsDevice, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_write_bps_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleWriteBpsDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleWriteBpsDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleWriteBpsDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleWriteBpsDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleWriteBpsDevice = (out.BlkioThrottleWriteBpsDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v58 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						if v58 == nil {
							v58 = new(configs.ThrottleDevice)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v58)
					}
					out.BlkioThrottleWriteBpsDevice = append(out.BlkioThrottleWriteBpsDevice, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_read_iops_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleReadIOPSDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleReadIOPSDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleReadIOPSDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleReadIOPSDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleReadIOPSDevice = (out.BlkioThrottleReadIOPSDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v59 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v59 = nil
					} else {
						if v59 == nil {
							v59 = new(configs.ThrottleDevice)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v59)
					}
					out.BlkioThrottleReadIOPSDevice = append(out.BlkioThrottleReadIOPSDevice, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "blkio_throttle_write_iops_device":
			if in.IsNull() {
				in.Skip()
				out.BlkioThrottleWriteIOPSDevice = nil
			} else {
				in.Delim('[')
				if out.BlkioThrottleWriteIOPSDevice == nil {
					if !in.IsDelim(']') {
						out.BlkioThrottleWriteIOPSDevice = make([]*configs.ThrottleDevice, 0, 8)
					} else {
						out.BlkioThrottleWriteIOPSDevice = []*configs.ThrottleDevice{}
					}
				} else {
					out.BlkioThrottleWriteIOPSDevice = (out.BlkioThrottleWriteIOPSDevice)[:0]
				}
				for !in.IsDelim(']') {
					var v60 *configs.ThrottleDevice
					if in.IsNull() {
						in.Skip()
						v60 = nil
					} else {
						if v60 == nil {
							v60 = new(configs.ThrottleDevice)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs14(in, &*v60)
					}
					out.BlkioThrottleWriteIOPSDevice = append(out.BlkioThrottleWriteIOPSDevice, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "freezer":
			out.Freezer = configs.FreezerState(in.String())
		case "hugetlb_limit":
			if in.IsNull() {
				in.Skip()
				out.HugetlbLimit = nil
			} else {
				in.Delim('[')
				if out.HugetlbLimit == nil {
					if !in.IsDelim(']') {
						out.HugetlbLimit = make([]*configs.HugepageLimit, 0, 8)
					} else {
						out.HugetlbLimit = []*configs.HugepageLimit{}
					}
				} else {
					out.HugetlbLimit = (out.HugetlbLimit)[:0]
				}
				for !in.IsDelim(']') {
					var v61 *configs.HugepageLimit
					if in.IsNull() {
						in.Skip()
						v61 = nil
					} else {
						if v61 == nil {
							v61 = new(configs.HugepageLimit)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs15(in, &*v61)
					}
					out.HugetlbLimit = append(out.HugetlbLimit, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "oom_kill_disable":
			out.OomKillDisable = bool(in.Bool())
		case "memory_swappiness":
			if in.IsNull() {
				in.Skip()
				out.MemorySwappiness = nil
			} else {
				if out.MemorySwappiness == nil {
					out.MemorySwappiness = new(uint64)
				}
				*out.MemorySwappiness = uint64(in.Uint64())
			}
		case "net_prio_ifpriomap":
			if in.IsNull() {
				in.Skip()
				out.NetPrioIfpriomap = nil
			} else {
				in.Delim('[')
				if out.NetPrioIfpriomap == nil {
					if !in.IsDelim(']') {
						out.NetPrioIfpriomap = make([]*configs.IfPrioMap, 0, 8)
					} else {
						out.NetPrioIfpriomap = []*configs.IfPrioMap{}
					}
				} else {
					out.NetPrioIfpriomap = (out.NetPrioIfpriomap)[:0]
				}
				for !in.IsDelim(']') {
					var v62 *configs.IfPrioMap
					if in.IsNull() {
						in.Skip()
						v62 = nil
					} else {
						if v62 == nil {
							v62 = new(configs.IfPrioMap)
						}
						easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs16(in, &*v62)
					}
					out.NetPrioIfpriomap = append(out.NetPrioIfpriomap, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "net_cls_classid_u":
			out.NetClsClassid = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs7(out *jwriter.Writer, in configs.Cgroup) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Parent != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parent\":")
		out.String(string(in.Parent))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"scope_prefix\":")
	out.String(string(in.ScopePrefix))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Paths\":")
	if in.Paths == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v63First := true
		for v63Name, v63Value := range in.Paths {
			if !v63First {
				out.RawByte(',')
			}
			v63First = false
			out.String(string(v63Name))
			out.RawByte(':')
			out.String(string(v63Value))
		}
		out.RawByte('}')
	}
	if in.AllowAllDevices != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"allow_all_devices\":")
		if in.AllowAllDevices == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.AllowAllDevices))
		}
	}
	if len(in.AllowedDevices) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"allowed_devices\":")
		if in.AllowedDevices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v64, v65 := range in.AllowedDevices {
				if v64 > 0 {
					out.RawByte(',')
				}
				if v65 == nil {
					out.RawString("null")
				} else {
					easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs2(out, *v65)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.DeniedDevices) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"denied_devices\":")
		if in.DeniedDevices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v66, v67 := range in.DeniedDevices {
				if v66 > 0 {
					out.RawByte(',')
				}
				if v67 == nil {
					out.RawString("null")
				} else {
					easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs2(out, *v67)
				}
			}
			out.RawByte(']')
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"devices\":")
	if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v68, v69 := range in.Devices {
			if v68 > 0 {
				out.RawByte(',')
			}
			if v69 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs2(out, *v69)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory\":")
	out.Uint64(uint64(in.Memory))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_reservation\":")
	out.Uint64(uint64(in.MemoryReservation))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_swap\":")
	out.Uint64(uint64(in.MemorySwap))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"kernel_memory\":")
	out.Uint64(uint64(in.KernelMemory))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"kernel_memory_tcp\":")
	out.Uint64(uint64(in.KernelMemoryTCP))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_shares\":")
	out.Uint64(uint64(in.CpuShares))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_quota\":")
	out.Int64(int64(in.CpuQuota))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_period\":")
	out.Uint64(uint64(in.CpuPeriod))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_rt_quota\":")
	out.Int64(int64(in.CpuRtRuntime))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpu_rt_period\":")
	out.Uint64(uint64(in.CpuRtPeriod))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpuset_cpus\":")
	out.String(string(in.CpusetCpus))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"cpuset_mems\":")
	out.String(string(in.CpusetMems))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pids_limit\":")
	out.Int64(int64(in.PidsLimit))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_weight\":")
	out.Uint16(uint16(in.BlkioWeight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_leaf_weight\":")
	out.Uint16(uint16(in.BlkioLeafWeight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_weight_device\":")
	if in.BlkioWeightDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v70, v71 := range in.BlkioWeightDevice {
			if v70 > 0 {
				out.RawByte(',')
			}
			if v71 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs13(out, *v71)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_read_bps_device\":")
	if in.BlkioThrottleReadBpsDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v72, v73 := range in.BlkioThrottleReadBpsDevice {
			if v72 > 0 {
				out.RawByte(',')
			}
			if v73 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v73)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_write_bps_device\":")
	if in.BlkioThrottleWriteBpsDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v74, v75 := range in.BlkioThrottleWriteBpsDevice {
			if v74 > 0 {
				out.RawByte(',')
			}
			if v75 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v75)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_read_iops_device\":")
	if in.BlkioThrottleReadIOPSDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v76, v77 := range in.BlkioThrottleReadIOPSDevice {
			if v76 > 0 {
				out.RawByte(',')
			}
			if v77 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v77)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"blkio_throttle_write_iops_device\":")
	if in.BlkioThrottleWriteIOPSDevice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v78, v79 := range in.BlkioThrottleWriteIOPSDevice {
			if v78 > 0 {
				out.RawByte(',')
			}
			if v79 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs14(out, *v79)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"freezer\":")
	out.String(string(in.Freezer))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hugetlb_limit\":")
	if in.HugetlbLimit == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v80, v81 := range in.HugetlbLimit {
			if v80 > 0 {
				out.RawByte(',')
			}
			if v81 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs15(out, *v81)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"oom_kill_disable\":")
	out.Bool(bool(in.OomKillDisable))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"memory_swappiness\":")
	if in.MemorySwappiness == nil {
		out.RawString("null")
	} else {
		out.Uint64(uint64(*in.MemorySwappiness))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"net_prio_ifpriomap\":")
	if in.NetPrioIfpriomap == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v82, v83 := range in.NetPrioIfpriomap {
			if v82 > 0 {
				out.RawByte(',')
			}
			if v83 == nil {
				out.RawString("null")
			} else {
				easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs16(out, *v83)
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"net_cls_classid_u\":")
	out.Uint32(uint32(in.NetClsClassid))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs16(in *jlexer.Lexer, out *configs.IfPrioMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "interface":
			out.Interface = string(in.String())
		case "priority":
			out.Priority = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs16(out *jwriter.Writer, in configs.IfPrioMap) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"interface\":")
	out.String(string(in.Interface))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"priority\":")
	out.Int64(int64(in.Priority))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs15(in *jlexer.Lexer, out *configs.HugepageLimit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page_size":
			out.Pagesize = string(in.String())
		case "limit":
			out.Limit = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs15(out *jwriter.Writer, in configs.HugepageLimit) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"page_size\":")
	out.String(string(in.Pagesize))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"limit\":")
	out.Uint64(uint64(in.Limit))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs14(in *jlexer.Lexer, out *configs.ThrottleDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rate":
			out.Rate = uint64(in.Uint64())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs14(out *jwriter.Writer, in configs.ThrottleDevice) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"rate\":")
	out.Uint64(uint64(in.Rate))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"major\":")
	out.Int64(int64(in.Major))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minor\":")
	out.Int64(int64(in.Minor))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs13(in *jlexer.Lexer, out *configs.WeightDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight":
			out.Weight = uint16(in.Uint16())
		case "leafWeight":
			out.LeafWeight = uint16(in.Uint16())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs13(out *jwriter.Writer, in configs.WeightDevice) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"weight\":")
	out.Uint16(uint16(in.Weight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"leafWeight\":")
	out.Uint16(uint16(in.LeafWeight))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"major\":")
	out.Int64(int64(in.Major))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minor\":")
	out.Int64(int64(in.Minor))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs6(in *jlexer.Lexer, out *configs.Route) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "destination":
			out.Destination = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "gateway":
			out.Gateway = string(in.String())
		case "interface_name":
			out.InterfaceName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs6(out *jwriter.Writer, in configs.Route) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"destination\":")
	out.String(string(in.Destination))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"source\":")
	out.String(string(in.Source))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gateway\":")
	out.String(string(in.Gateway))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"interface_name\":")
	out.String(string(in.InterfaceName))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs5(in *jlexer.Lexer, out *configs.Network) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "bridge":
			out.Bridge = string(in.String())
		case "mac_address":
			out.MacAddress = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "gateway":
			out.Gateway = string(in.String())
		case "ipv6_address":
			out.IPv6Address = string(in.String())
		case "ipv6_gateway":
			out.IPv6Gateway = string(in.String())
		case "mtu":
			out.Mtu = int(in.Int())
		case "txqueuelen":
			out.TxQueueLen = int(in.Int())
		case "host_interface_name":
			out.HostInterfaceName = string(in.String())
		case "hairpin_mode":
			out.HairpinMode = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs5(out *jwriter.Writer, in configs.Network) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	out.String(string(in.Name))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bridge\":")
	out.String(string(in.Bridge))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mac_address\":")
	out.String(string(in.MacAddress))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"address\":")
	out.String(string(in.Address))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gateway\":")
	out.String(string(in.Gateway))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ipv6_address\":")
	out.String(string(in.IPv6Address))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ipv6_gateway\":")
	out.String(string(in.IPv6Gateway))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mtu\":")
	out.Int(int(in.Mtu))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"txqueuelen\":")
	out.Int(int(in.TxQueueLen))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"host_interface_name\":")
	out.String(string(in.HostInterfaceName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"hairpin_mode\":")
	out.Bool(bool(in.HairpinMode))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs4(in *jlexer.Lexer, out *configs.Capabilities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Bounding":
			if in.IsNull() {
				in.Skip()
				out.Bounding = nil
			} else {
				in.Delim('[')
				if out.Bounding == nil {
					if !in.IsDelim(']') {
						out.Bounding = make([]string, 0, 4)
					} else {
						out.Bounding = []string{}
					}
				} else {
					out.Bounding = (out.Bounding)[:0]
				}
				for !in.IsDelim(']') {
					var v84 string
					v84 = string(in.String())
					out.Bounding = append(out.Bounding, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Effective":
			if in.IsNull() {
				in.Skip()
				out.Effective = nil
			} else {
				in.Delim('[')
				if out.Effective == nil {
					if !in.IsDelim(']') {
						out.Effective = make([]string, 0, 4)
					} else {
						out.Effective = []string{}
					}
				} else {
					out.Effective = (out.Effective)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.Effective = append(out.Effective, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Inheritable":
			if in.IsNull() {
				in.Skip()
				out.Inheritable = nil
			} else {
				in.Delim('[')
				if out.Inheritable == nil {
					if !in.IsDelim(']') {
						out.Inheritable = make([]string, 0, 4)
					} else {
						out.Inheritable = []string{}
					}
				} else {
					out.Inheritable = (out.Inheritable)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.Inheritable = append(out.Inheritable, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Permitted":
			if in.IsNull() {
				in.Skip()
				out.Permitted = nil
			} else {
				in.Delim('[')
				if out.Permitted == nil {
					if !in.IsDelim(']') {
						out.Permitted = make([]string, 0, 4)
					} else {
						out.Permitted = []string{}
					}
				} else {
					out.Permitted = (out.Permitted)[:0]
				}
				for !in.IsDelim(']') {
					var v87 string
					v87 = string(in.String())
					out.Permitted = append(out.Permitted, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Ambient":
			if in.IsNull() {
				in.Skip()
				out.Ambient = nil
			} else {
				in.Delim('[')
				if out.Ambient == nil {
					if !in.IsDelim(']') {
						out.Ambient = make([]string, 0, 4)
					} else {
						out.Ambient = []string{}
					}
				} else {
					out.Ambient = (out.Ambient)[:0]
				}
				for !in.IsDelim(']') {
					var v88 string
					v88 = string(in.String())
					out.Ambient = append(out.Ambient, v88)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs4(out *jwriter.Writer, in configs.Capabilities) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Bounding\":")
	if in.Bounding == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v89, v90 := range in.Bounding {
			if v89 > 0 {
				out.RawByte(',')
			}
			out.String(string(v90))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Effective\":")
	if in.Effective == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v91, v92 := range in.Effective {
			if v91 > 0 {
				out.RawByte(',')
			}
			out.String(string(v92))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Inheritable\":")
	if in.Inheritable == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v93, v94 := range in.Inheritable {
			if v93 > 0 {
				out.RawByte(',')
			}
			out.String(string(v94))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Permitted\":")
	if in.Permitted == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v95, v96 := range in.Permitted {
			if v95 > 0 {
				out.RawByte(',')
			}
			out.String(string(v96))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"Ambient\":")
	if in.Ambient == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v97, v98 := range in.Ambient {
			if v97 > 0 {
				out.RawByte(',')
			}
			out.String(string(v98))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs3(in *jlexer.Lexer, out *configs.Namespace) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = configs.NamespaceType(in.String())
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs3(out *jwriter.Writer, in configs.Namespace) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs2(in *jlexer.Lexer, out *configs.Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = int32(in.Int32())
		case "path":
			out.Path = string(in.String())
		case "major":
			out.Major = int64(in.Int64())
		case "minor":
			out.Minor = int64(in.Int64())
		case "permissions":
			out.Permissions = string(in.String())
		case "file_mode":
			out.FileMode = os.FileMode(in.Uint32())
		case "uid":
			out.Uid = uint32(in.Uint32())
		case "gid":
			out.Gid = uint32(in.Uint32())
		case "allow":
			out.Allow = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs2(out *jwriter.Writer, in configs.Device) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.Int32(int32(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"major\":")
	out.Int64(int64(in.Major))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"minor\":")
	out.Int64(int64(in.Minor))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"permissions\":")
	out.String(string(in.Permissions))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"file_mode\":")
	out.Uint32(uint32(in.FileMode))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uid\":")
	out.Uint32(uint32(in.Uid))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gid\":")
	out.Uint32(uint32(in.Gid))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"allow\":")
	out.Bool(bool(in.Allow))
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs1(in *jlexer.Lexer, out *configs.Mount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "destination":
			out.Destination = string(in.String())
		case "device":
			out.Device = string(in.String())
		case "flags":
			out.Flags = int(in.Int())
		case "propagation_flags":
			if in.IsNull() {
				in.Skip()
				out.PropagationFlags = nil
			} else {
				in.Delim('[')
				if out.PropagationFlags == nil {
					if !in.IsDelim(']') {
						out.PropagationFlags = make([]int, 0, 8)
					} else {
						out.PropagationFlags = []int{}
					}
				} else {
					out.PropagationFlags = (out.PropagationFlags)[:0]
				}
				for !in.IsDelim(']') {
					var v99 int
					v99 = int(in.Int())
					out.PropagationFlags = append(out.PropagationFlags, v99)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "data":
			out.Data = string(in.String())
		case "relabel":
			out.Relabel = string(in.String())
		case "extensions":
			out.Extensions = int(in.Int())
		case "premount_cmds":
			if in.IsNull() {
				in.Skip()
				out.PremountCmds = nil
			} else {
				in.Delim('[')
				if out.PremountCmds == nil {
					if !in.IsDelim(']') {
						out.PremountCmds = make([]configs.Command, 0, 1)
					} else {
						out.PremountCmds = []configs.Command{}
					}
				} else {
					out.PremountCmds = (out.PremountCmds)[:0]
				}
				for !in.IsDelim(']') {
					var v100 configs.Command
					easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs17(in, &v100)
					out.PremountCmds = append(out.PremountCmds, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "postmount_cmds":
			if in.IsNull() {
				in.Skip()
				out.PostmountCmds = nil
			} else {
				in.Delim('[')
				if out.PostmountCmds == nil {
					if !in.IsDelim(']') {
						out.PostmountCmds = make([]configs.Command, 0, 1)
					} else {
						out.PostmountCmds = []configs.Command{}
					}
				} else {
					out.PostmountCmds = (out.PostmountCmds)[:0]
				}
				for !in.IsDelim(']') {
					var v101 configs.Command
					easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs17(in, &v101)
					out.PostmountCmds = append(out.PostmountCmds, v101)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs1(out *jwriter.Writer, in configs.Mount) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"source\":")
	out.String(string(in.Source))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"destination\":")
	out.String(string(in.Destination))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"device\":")
	out.String(string(in.Device))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"flags\":")
	out.Int(int(in.Flags))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"propagation_flags\":")
	if in.PropagationFlags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v102, v103 := range in.PropagationFlags {
			if v102 > 0 {
				out.RawByte(',')
			}
			out.Int(int(v103))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	out.String(string(in.Data))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"relabel\":")
	out.String(string(in.Relabel))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"extensions\":")
	out.Int(int(in.Extensions))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"premount_cmds\":")
	if in.PremountCmds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v104, v105 := range in.PremountCmds {
			if v104 > 0 {
				out.RawByte(',')
			}
			easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs17(out, v105)
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"postmount_cmds\":")
	if in.PostmountCmds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v106, v107 := range in.PostmountCmds {
			if v106 > 0 {
				out.RawByte(',')
			}
			easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs17(out, v107)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson52681dd8DecodeGithubComOpencontainersRuncLibcontainerConfigs17(in *jlexer.Lexer, out *configs.Command) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v108 string
					v108 = string(in.String())
					out.Args = append(out.Args, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]string, 0, 4)
					} else {
						out.Env = []string{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v109 string
					v109 = string(in.String())
					out.Env = append(out.Env, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dir":
			out.Dir = string(in.String())
		case "timeout":
			if in.IsNull() {
				in.Skip()
				out.Timeout = nil
			} else {
				if out.Timeout == nil {
					out.Timeout = new(time.Duration)
				}
				*out.Timeout = time.Duration(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson52681dd8EncodeGithubComOpencontainersRuncLibcontainerConfigs17(out *jwriter.Writer, in configs.Command) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"path\":")
	out.String(string(in.Path))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"args\":")
	if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v110, v111 := range in.Args {
			if v110 > 0 {
				out.RawByte(',')
			}
			out.String(string(v111))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"env\":")
	if in.Env == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v112, v113 := range in.Env {
			if v112 > 0 {
				out.RawByte(',')
			}
			out.String(string(v113))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"dir\":")
	out.String(string(in.Dir))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timeout\":")
	if in.Timeout == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.Timeout))
	}
	out.RawByte('}')
}
